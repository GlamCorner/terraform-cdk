name: Build
on:
  pull_request:
    paths-ignore:
      - "**.md"
      - "docs/**"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        terraform: ["0.14.11", "0.15.4"]
    container:
      image: docker.mirror.hashicorp.services/hashicorp/jsii-terraform
    env:
      CHECKPOINT_DISABLE: "1"

    steps:
      - uses: actions/checkout@v2
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: installing dependencies
        run: |
          yarn install
      - name: compile
        run: |
          tools/align-version.sh
          yarn build
        env:
          TERRAFORM_BINARY_NAME: "terraform${{ matrix.terraform }}"
      - name: test
        run: |
          yarn test
        env:
          TERRAFORM_BINARY_NAME: "terraform${{ matrix.terraform }}"
      - name: create bundle
        run: yarn package
      - name: Upload dist
        if: ${{ matrix.terraform == '0.14.11' }}
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist

  linux_integration:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        terraform: ["0.14.11", "0.15.4"]
        target: ["typescript", "python", "java", "csharp", "go"]
    container:
      image: docker.mirror.hashicorp.services/hashicorp/jsii-terraform
    needs: build
    env:
      CHECKPOINT_DISABLE: "1"
      TERRAFORM_VERSION: ${{ matrix.terraform }}

    steps:
      - uses: actions/checkout@v2
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Download dist
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: installing dependencies
        run: yarn install
      - name: integration tests
        run: yarn integration:${TEST_TARGET}
        env:
          TEST_TARGET: ${{ matrix.target }}
          TERRAFORM_CLOUD_TOKEN: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}
          TERRAFORM_BINARY_NAME: "terraform${{ matrix.terraform }}"

  windows_integration:
    runs-on: windows-latest
    strategy:
      matrix:
        terraform: ["0.14.11", "0.15.4"]
        target: ["typescript", "python", "java", "csharp", "go"]
    needs: build
    env:
      CHECKPOINT_DISABLE: "1"
      TERRAFORM_VERSION: ${{ matrix.terraform }}

    steps:
      - uses: actions/checkout@v2
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
          terraform_version: ${{ matrix.terraform }}
      - name: Install pipenv
        run: pip install pipenv
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16.x
      - name: Download dist
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: installing dependencies
        run: yarn install
      - name: integration tests
        run: yarn integration:windows:${env:TEST_TARGET}
        env:
          TEST_TARGET: ${{ matrix.target }}
          TERRAFORM_CLOUD_TOKEN: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}
